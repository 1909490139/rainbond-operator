// RAINBOND, Application Management Platform
// Copyright (C) 2014-2017 Goodrain Co., Ltd.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version. For any non-GPL usage of Rainbond,
// one or multiple Commercial Licenses authorized by Goodrain Co., Ltd.
// must be obtained first.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/apis/rainbond/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageProvisionerLister helps list StorageProvisioners.
type StorageProvisionerLister interface {
	// List lists all StorageProvisioners in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageProvisioner, err error)
	// StorageProvisioners returns an object that can list and get StorageProvisioners.
	StorageProvisioners(namespace string) StorageProvisionerNamespaceLister
	StorageProvisionerListerExpansion
}

// storageProvisionerLister implements the StorageProvisionerLister interface.
type storageProvisionerLister struct {
	indexer cache.Indexer
}

// NewStorageProvisionerLister returns a new StorageProvisionerLister.
func NewStorageProvisionerLister(indexer cache.Indexer) StorageProvisionerLister {
	return &storageProvisionerLister{indexer: indexer}
}

// List lists all StorageProvisioners in the indexer.
func (s *storageProvisionerLister) List(selector labels.Selector) (ret []*v1alpha1.StorageProvisioner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageProvisioner))
	})
	return ret, err
}

// StorageProvisioners returns an object that can list and get StorageProvisioners.
func (s *storageProvisionerLister) StorageProvisioners(namespace string) StorageProvisionerNamespaceLister {
	return storageProvisionerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageProvisionerNamespaceLister helps list and get StorageProvisioners.
type StorageProvisionerNamespaceLister interface {
	// List lists all StorageProvisioners in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageProvisioner, err error)
	// Get retrieves the StorageProvisioner from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageProvisioner, error)
	StorageProvisionerNamespaceListerExpansion
}

// storageProvisionerNamespaceLister implements the StorageProvisionerNamespaceLister
// interface.
type storageProvisionerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageProvisioners in the indexer for a given namespace.
func (s storageProvisionerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageProvisioner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageProvisioner))
	})
	return ret, err
}

// Get retrieves the StorageProvisioner from the indexer for a given namespace and name.
func (s storageProvisionerNamespaceLister) Get(name string) (*v1alpha1.StorageProvisioner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storageprovisioner"), name)
	}
	return obj.(*v1alpha1.StorageProvisioner), nil
}
