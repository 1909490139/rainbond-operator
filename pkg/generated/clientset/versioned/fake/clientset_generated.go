// RAINBOND, Application Management Platform
// Copyright (C) 2014-2017 Goodrain Co., Ltd.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version. For any non-GPL usage of Rainbond,
// one or multiple Commercial Licenses authorized by Goodrain Co., Ltd.
// must be obtained first.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned"
	privateregistryv1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned/typed/privateregistry/v1alpha1"
	fakeprivateregistryv1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned/typed/privateregistry/v1alpha1/fake"
	rainbondv1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned/typed/rainbond/v1alpha1"
	fakerainbondv1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned/typed/rainbond/v1alpha1/fake"
	storageprovisionerv1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned/typed/storageprovisioner/v1alpha1"
	fakestorageprovisionerv1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/generated/clientset/versioned/typed/storageprovisioner/v1alpha1/fake"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// PrivateregistryV1alpha1 retrieves the PrivateregistryV1alpha1Client
func (c *Clientset) PrivateregistryV1alpha1() privateregistryv1alpha1.PrivateregistryV1alpha1Interface {
	return &fakeprivateregistryv1alpha1.FakePrivateregistryV1alpha1{Fake: &c.Fake}
}

// RainbondV1alpha1 retrieves the RainbondV1alpha1Client
func (c *Clientset) RainbondV1alpha1() rainbondv1alpha1.RainbondV1alpha1Interface {
	return &fakerainbondv1alpha1.FakeRainbondV1alpha1{Fake: &c.Fake}
}

// StorageprovisionerV1alpha1 retrieves the StorageprovisionerV1alpha1Client
func (c *Clientset) StorageprovisionerV1alpha1() storageprovisionerv1alpha1.StorageprovisionerV1alpha1Interface {
	return &fakestorageprovisionerv1alpha1.FakeStorageprovisionerV1alpha1{Fake: &c.Fake}
}
