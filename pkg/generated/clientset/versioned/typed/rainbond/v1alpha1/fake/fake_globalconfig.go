// RAINBOND, Application Management Platform
// Copyright (C) 2014-2017 Goodrain Co., Ltd.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version. For any non-GPL usage of Rainbond,
// one or multiple Commercial Licenses authorized by Goodrain Co., Ltd.
// must be obtained first.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/GLYASAI/rainbond-operator/pkg/apis/rainbond/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGlobalConfigs implements GlobalConfigInterface
type FakeGlobalConfigs struct {
	Fake *FakeRainbondV1alpha1
	ns   string
}

var globalconfigsResource = schema.GroupVersionResource{Group: "rainbond.io", Version: "v1alpha1", Resource: "globalconfigs"}

var globalconfigsKind = schema.GroupVersionKind{Group: "rainbond.io", Version: "v1alpha1", Kind: "GlobalConfig"}

// Get takes name of the globalConfig, and returns the corresponding globalConfig object, and an error if there is any.
func (c *FakeGlobalConfigs) Get(name string, options v1.GetOptions) (result *v1alpha1.GlobalConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(globalconfigsResource, c.ns, name), &v1alpha1.GlobalConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalConfig), err
}

// List takes label and field selectors, and returns the list of GlobalConfigs that match those selectors.
func (c *FakeGlobalConfigs) List(opts v1.ListOptions) (result *v1alpha1.GlobalConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(globalconfigsResource, globalconfigsKind, c.ns, opts), &v1alpha1.GlobalConfigList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.GlobalConfigList{ListMeta: obj.(*v1alpha1.GlobalConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.GlobalConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested globalConfigs.
func (c *FakeGlobalConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(globalconfigsResource, c.ns, opts))

}

// Create takes the representation of a globalConfig and creates it.  Returns the server's representation of the globalConfig, and an error, if there is any.
func (c *FakeGlobalConfigs) Create(globalConfig *v1alpha1.GlobalConfig) (result *v1alpha1.GlobalConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(globalconfigsResource, c.ns, globalConfig), &v1alpha1.GlobalConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalConfig), err
}

// Update takes the representation of a globalConfig and updates it. Returns the server's representation of the globalConfig, and an error, if there is any.
func (c *FakeGlobalConfigs) Update(globalConfig *v1alpha1.GlobalConfig) (result *v1alpha1.GlobalConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(globalconfigsResource, c.ns, globalConfig), &v1alpha1.GlobalConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeGlobalConfigs) UpdateStatus(globalConfig *v1alpha1.GlobalConfig) (*v1alpha1.GlobalConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(globalconfigsResource, "status", c.ns, globalConfig), &v1alpha1.GlobalConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalConfig), err
}

// Delete takes name of the globalConfig and deletes it. Returns an error if one occurs.
func (c *FakeGlobalConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(globalconfigsResource, c.ns, name), &v1alpha1.GlobalConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGlobalConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(globalconfigsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.GlobalConfigList{})
	return err
}

// Patch applies the patch and returns the patched globalConfig.
func (c *FakeGlobalConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.GlobalConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(globalconfigsResource, c.ns, name, pt, data, subresources...), &v1alpha1.GlobalConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GlobalConfig), err
}
