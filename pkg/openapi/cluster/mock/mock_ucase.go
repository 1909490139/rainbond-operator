// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/openapi/cluster/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	cluster "github.com/goodrain/rainbond-operator/pkg/openapi/cluster"
	model "github.com/goodrain/rainbond-operator/pkg/openapi/model"
	v1 "github.com/goodrain/rainbond-operator/pkg/openapi/types/v1"
	reflect "reflect"
)

// MockIClusterCase is a mock of IClusterUcase interface
type MockIClusterCase struct {
	ctrl     *gomock.Controller
	recorder *MockIClusterCaseMockRecorder
}

// MockIClusterCaseMockRecorder is the mock recorder for MockIClusterCase
type MockIClusterCaseMockRecorder struct {
	mock *MockIClusterCase
}

// NewMockIClusterCase creates a new mock instance
func NewMockIClusterCase(ctrl *gomock.Controller) *MockIClusterCase {
	mock := &MockIClusterCase{ctrl: ctrl}
	mock.recorder = &MockIClusterCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIClusterCase) EXPECT() *MockIClusterCaseMockRecorder {
	return m.recorder
}

// GlobalConfigs mocks base method
func (m *MockIClusterCase) GlobalConfigs() cluster.GlobalConfigUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalConfigs")
	ret0, _ := ret[0].(cluster.GlobalConfigUseCase)
	return ret0
}

// GlobalConfigs indicates an expected call of GlobalConfigs
func (mr *MockIClusterCaseMockRecorder) GlobalConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalConfigs", reflect.TypeOf((*MockIClusterCase)(nil).GlobalConfigs))
}

// Components mocks base method
func (m *MockIClusterCase) Components() cluster.ComponentUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Components")
	ret0, _ := ret[0].(cluster.ComponentUseCase)
	return ret0
}

// Components indicates an expected call of Components
func (mr *MockIClusterCaseMockRecorder) Components() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Components", reflect.TypeOf((*MockIClusterCase)(nil).Components))
}

// Install mocks base method
func (m *MockIClusterCase) Install() cluster.InstallUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install")
	ret0, _ := ret[0].(cluster.InstallUseCase)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockIClusterCaseMockRecorder) Install() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockIClusterCase)(nil).Install))
}

// Cluster mocks base method
func (m *MockIClusterCase) Cluster() cluster.Usecase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(cluster.Usecase)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockIClusterCaseMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockIClusterCase)(nil).Cluster))
}

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockUsecase) Status() (*model.ClusterStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*model.ClusterStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockUsecaseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockUsecase)(nil).Status))
}

// Init mocks base method
func (m *MockUsecase) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockUsecaseMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockUsecase)(nil).Init))
}

// UnInstall mocks base method
func (m *MockUsecase) UnInstall() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnInstall")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnInstall indicates an expected call of UnInstall
func (mr *MockUsecaseMockRecorder) UnInstall() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnInstall", reflect.TypeOf((*MockUsecase)(nil).UnInstall))
}

// StatusInfo mocks base method
func (m *MockUsecase) StatusInfo() (*v1.ClusterStatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusInfo")
	ret0, _ := ret[0].(*v1.ClusterStatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusInfo indicates an expected call of StatusInfo
func (mr *MockUsecaseMockRecorder) StatusInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusInfo", reflect.TypeOf((*MockUsecase)(nil).StatusInfo))
}

// MockGlobalConfigUseCase is a mock of GlobalConfigUseCase interface
type MockGlobalConfigUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalConfigUseCaseMockRecorder
}

// MockGlobalConfigUseCaseMockRecorder is the mock recorder for MockGlobalConfigUseCase
type MockGlobalConfigUseCaseMockRecorder struct {
	mock *MockGlobalConfigUseCase
}

// NewMockGlobalConfigUseCase creates a new mock instance
func NewMockGlobalConfigUseCase(ctrl *gomock.Controller) *MockGlobalConfigUseCase {
	mock := &MockGlobalConfigUseCase{ctrl: ctrl}
	mock.recorder = &MockGlobalConfigUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGlobalConfigUseCase) EXPECT() *MockGlobalConfigUseCaseMockRecorder {
	return m.recorder
}

// GlobalConfigs mocks base method
func (m *MockGlobalConfigUseCase) GlobalConfigs() (*model.GlobalConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalConfigs")
	ret0, _ := ret[0].(*model.GlobalConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalConfigs indicates an expected call of GlobalConfigs
func (mr *MockGlobalConfigUseCaseMockRecorder) GlobalConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalConfigs", reflect.TypeOf((*MockGlobalConfigUseCase)(nil).GlobalConfigs))
}

// UpdateGlobalConfig mocks base method
func (m *MockGlobalConfigUseCase) UpdateGlobalConfig(config *model.GlobalConfigs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalConfig indicates an expected call of UpdateGlobalConfig
func (mr *MockGlobalConfigUseCaseMockRecorder) UpdateGlobalConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalConfig", reflect.TypeOf((*MockGlobalConfigUseCase)(nil).UpdateGlobalConfig), config)
}

// Address mocks base method
func (m *MockGlobalConfigUseCase) Address() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Address indicates an expected call of Address
func (mr *MockGlobalConfigUseCaseMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockGlobalConfigUseCase)(nil).Address))
}

// MockComponentUseCase is a mock of ComponentUseCase interface
type MockComponentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockComponentUseCaseMockRecorder
}

// MockComponentUseCaseMockRecorder is the mock recorder for MockComponentUseCase
type MockComponentUseCaseMockRecorder struct {
	mock *MockComponentUseCase
}

// NewMockComponentUseCase creates a new mock instance
func NewMockComponentUseCase(ctrl *gomock.Controller) *MockComponentUseCase {
	mock := &MockComponentUseCase{ctrl: ctrl}
	mock.recorder = &MockComponentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentUseCase) EXPECT() *MockComponentUseCaseMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockComponentUseCase) Get(name string) (*v1.RbdComponentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.RbdComponentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockComponentUseCaseMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockComponentUseCase)(nil).Get), name)
}

// List mocks base method
func (m *MockComponentUseCase) List(isInit bool) ([]*v1.RbdComponentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", isInit)
	ret0, _ := ret[0].([]*v1.RbdComponentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockComponentUseCaseMockRecorder) List(isInit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockComponentUseCase)(nil).List), isInit)
}

// MockInstallUseCase is a mock of InstallUseCase interface
type MockInstallUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInstallUseCaseMockRecorder
}

// MockInstallUseCaseMockRecorder is the mock recorder for MockInstallUseCase
type MockInstallUseCaseMockRecorder struct {
	mock *MockInstallUseCase
}

// NewMockInstallUseCase creates a new mock instance
func NewMockInstallUseCase(ctrl *gomock.Controller) *MockInstallUseCase {
	mock := &MockInstallUseCase{ctrl: ctrl}
	mock.recorder = &MockInstallUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstallUseCase) EXPECT() *MockInstallUseCaseMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockInstallUseCase) Install() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install")
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInstallUseCaseMockRecorder) Install() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstallUseCase)(nil).Install))
}

// InstallStatus mocks base method
func (m *MockInstallUseCase) InstallStatus() (model.StatusRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallStatus")
	ret0, _ := ret[0].(model.StatusRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallStatus indicates an expected call of InstallStatus
func (mr *MockInstallUseCaseMockRecorder) InstallStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallStatus", reflect.TypeOf((*MockInstallUseCase)(nil).InstallStatus))
}
